from .DCTConvert import *

class Quantum:
    """
    Выполняет квантование и деквантование DCT-коэффициентов с использованием матриц квантования.

    Методы:
        requant: Генерирует матрицу квантования для заданного качества
        quantile: Применяет квантование к DCT-коэффициентам
        dequantile: Восстанавливает коэффициенты из квантованных значений
    """
    def __init__(self):
        self.Q_Y = np.array([
            [16, 11, 10, 16, 24, 40, 51, 61],
            [12, 12, 14, 19, 26, 58, 60, 55],
            [14, 13, 16, 24, 40, 57, 69, 56],
            [14, 17, 22, 29, 51, 87, 80, 62],
            [18, 22, 37, 56, 68, 109, 103, 77],
            [24, 35, 55, 64, 81, 104, 113, 92],
            [49, 64, 78, 87, 103, 121, 120, 101],
            [72, 92, 95, 98, 112, 100, 103, 99]
        ])
        self.Q_C = np.array([
            [17, 18, 24, 47, 99, 99, 99, 99],
            [18, 21, 26, 66, 99, 99, 99, 99],
            [24, 26, 56, 99, 99, 99, 99, 99],
            [47, 66, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99]
        ])

    def requant(self, Q: str='y', quality: int=100):
        """
        Генерирует масштабированную матрицу квантования для заданного уровня качества.

        Args:
            Q (str, optional):
                Тип матрицы: 'y' для яркостного канала, 'c' для цветностного.
                По умолчанию 'y'.
            quality (int, optional):
                Уровень качества (0-100). По умолчанию 100 (максимальное качество).

        Returns:
            np.ndarray: Масштабированная матрица квантования размером 8x8
        """
        if Q.lower() == 'y':
            Q = self.Q_Y
        else:
            Q = self.Q_C

        epsilon = 1e-2

        if quality == 0:
            scale = 5000 / epsilon
        elif quality < 50:
            scale = 5000 / quality
        else:
            scale = 200 - 2 * quality

        Q_scaled = np.floor((Q * scale + 50) / 100)
        Q_scaled[Q_scaled == 0] = 1
        return Q_scaled.astype(np.uint8)

    @staticmethod
    def quantile(Q, channel):
        """
        Применяет квантование к DCT-коэффициентам канала.

        Args:
            Q (np.ndarray): Матрица квантования 8x8
            channel (np.ndarray):
                Канал изображения в виде массива блоков DCT-коэффициентов
                формата (число_блоков_Y, число_блоков_X, 8, 8)

        Returns:
            np.ndarray: Квантованные коэффициенты (целочисленные значения)
        """
        return np.array([np.round(block / Q).astype(np.int16) for block in channel])
    
    @staticmethod
    def dequantile(Q, channel):
        """
        Восстанавливает DCT-коэффициенты из квантованных значений.

        Args:
            Q (np.ndarray): Матрица квантования 8x8
            channel (np.ndarray):
                Квантованный канал в виде массива блоков
                формата (число_блоков_Y, число_блоков_X, 8, 8)

        Returns:
            np.ndarray: Восстановленные DCT-коэффициенты
        """
        return np.array([np.round(block * Q).astype(np.int16) for block in channel])
